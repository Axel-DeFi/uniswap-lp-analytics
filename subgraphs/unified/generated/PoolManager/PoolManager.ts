// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this);
  }
}

export class Initialize__Params {
  _event: Initialize;

  constructor(event: Initialize) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get currency0(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get currency1(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fee(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get tickSpacing(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get hooks(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get sqrtPriceX96(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get tick(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class PoolManager extends ethereum.SmartContract {
  static bind(address: Address): PoolManager {
    return new PoolManager("PoolManager", address);
  }
}
